---
layout: base.njk
title: Club Store
description: Get exclusive merch, membership, materials, and more!
googleAnalyticsId: { { site.googleAnalyticsId } }
---

<!-- Wrapper -->
<div id="wrapper" class="divided">
  <!-- Terms Modal -->
  <div
    class="modal fade"
    id="terms-modal"
    tabindex="-1"
    aria-labelledby="onloadModalLabel"
    data-bs-backdrop="static"
    data-bs-keyboard="false"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h4 class="modal-title" id="onloadModalLabel">Welcome to our Club Store!</h4>
          </div>
        </div>
        <div class="modal-body">
          <p>Important Reminders:</p>
          <ul>
            <li>
              Physical items are usually only for
              <span class="text-danger">in-person pickup at UCSD, SDF, or IBFM.</span>
            </li>
            <li>
              All sales are final (Sorry -- No refunds, but we allow exchanges within 7 days.)
            </li>
            <li>
              By using the Club Store, you agree to our
              <a
                href="https://docs.google.com/document/d/1pGtIp7QoiZ7fPP1KXVEw85TiWYM2SDL1Vo1zUNRaqHU/edit?usp=sharing"
                target="_blank"
                >Terms of Service</a
              >.
            </li>
          </ul>
          <p>If you have any questions, please reach out to us via Discord :3</p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-primary" data-bs-dismiss="modal" type="button">
            Agree and continue
          </button>
          <a class="btn btn-secondary" href="javascript:history.back()">Go back</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Post-Payment Form Modal -->
  <div
    class="modal fade"
    id="ppform-modal"
    tabindex="-1"
    aria-labelledby="ppformModalLabel"
    data-bs-backdrop="static"
    data-bs-keyboard="false"
  >
    <div class="modal-dialog">
      <div class="modal-content">
        <form id="post-payment-form" onsubmit="event.preventDefault(); submitPPForm();">
          <div class="modal-header">
            <div>
              <h4 class="modal-title" id="ppformModalLabel">Success, thank you!</h4>
            </div>
          </div>
          <div class="modal-body">
            <p>Last step&mdash;to help expedite delivery, please fill out the following:</p>

            <!-- Form with Email, Discord/Telegram, Desired Pickup Location (dropdown), and Tshirt Size (dropdown) -->
            <div class="mb-3 form-input">
              <label for="ppform-email" class="form-label">Email Address</label>
              <input type="email" class="form-control" id="ppform-email" required/>
            </div>
            <div class="mb-3 form-input">
              <label for="ppform-contact" class="form-label"
                >Preferred Contact Info (Discord, Telegram, or Phone #)</label
              >
              <input
                type="text"
                class="form-control"
                id="ppform-contact"
                placeholder="@username or Phone #"
                required
              />
            </div>
            <div class="mb-3 form-input">
              <label for="ppform-pickup-location" class="form-label">Desired Pickup Location</label>
              <select class="form-select form-input-dropdown" id="ppform-pickup-location" required>
                <option value="" disabled selected></option>
                <option value="UCSD">UCSD</option>
                <option value="SDF">SDF</option>
                <option value="IBFM">IBFM</option>
              </select>
            </div>
            <div class="mb-3 form-input">
              <label for="ppform-tshirt-size" class="form-label">Shirt Size</label>
              <select class="form-select form-input-dropdown" id="ppform-tshirt-size">
                <option value="" disabled selected></option>
                <option value="S">S</option>
                <option value="M">M</option>
                <option value="L">L</option>
                <option value="XL">XL</option>
                <option value="XXL">2XL</option>
              </select>
            </div>
            <div class="mb-3 form-input">
              <label for="ppform-comments" class="form-label"
                >Any comments or special requests</label
              >
              <textarea class="form-control" id="ppform-comments" rows="3"></textarea>
            </div>
          </div>
          <div class="modal-footer">
            <button class="btn btn-link text-secondary" data-bs-dismiss="modal" type="button">
              Skip
            </button>
            <button class="btn btn-primary" type="submit">Submit</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Item Modal -->
  <div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h4 class="modal-title" id="itemModalLabel">Title</h4>
            {#
            <p>Short Description</p>
            #}
          </div>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body">
          <img
            id="item-modal-image"
            alt="item modal image"
            src="/assets/images/store/beach_1.png"
          />
          <div class="options-list">
            <!-- Options -->
            <div class="mcq">
              <div class="mcq-header">
                <h6>Item options:</h6>
              </div>
              <div class="mcq-options">
                <button class="btn btn-sm btn-secondary" type="button">Option A</button>
                <button class="btn btn-sm btn-light" type="button">Option B</button>
              </div>
            </div>

            <!-- Description -->
            <p id="item-modal-description">Full item description</p>
          </div>
        </div>
        <div class="modal-footer" id="item-modal-footer-standard">
          <div class="modal-footer-price-display">
            <p id="item-modal-price">$Price</p>
            <p class="modal-footer-price-display-detail">Fees already included</p>
          </div>
          <div class="cart-item-actions">
            <button class="btn btn-outline-secondary" id="item-modal-quantity-down" type="button">
              –
            </button>
            <span class="cart-item-quantity" id="item-modal-quantity">1</span>
            <button class="btn btn-outline-secondary" id="item-modal-quantity-up" type="button">
              +
            </button>
            <button id="item-modal-addtocart" class="btn btn-primary" type="button">
              Add to Cart
            </button>
          </div>
        </div>
        <!-- Different footer state for when item is added to cart: -->
        <div class="modal-footer" id="item-modal-footer-addedtocart">
          <div class="modal-footer-price-display">
            <span class="text-success font-weight-bold">Added to Cart!</span>
          </div>
          <button
            class="btn btn-link text-secondary"
            data-bs-dismiss="modal"
            onclick="openCartModal()"
            type="button"
          >
            View Cart
          </button>
          <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">
            Continue Shopping
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Cart Modal -->
  <div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h4 class="modal-title" id="cartModalLabel">Your Cart</h4>
            <p id="cart-modal-item-count">Item Count</p>
          </div>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body" id="cart-modal-item-list">
          <div class="cart-item">
            <img src="/assets/images/store/beach_1.png" alt="cart item image" />
            <div class="cart-item-details">
              <div class="cart-item-header">
                <p class="cart-item-header-title">Item Title</p>
                <p>$Price</p>
              </div>
              <p>Item Options</p>
              <div class="cart-item-actions mt-2">
                <button class="btn btn-sm btn-outline-secondary" type="button">–</button>
                <span class="cart-item-quantity">1</span>
                <button class="btn btn-sm btn-outline-secondary" type="button">+</button>
                <button class="btn btn-sm btn-link text-secondary" type="button">Delete</button>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <div class="modal-footer-price-display">
            <p id="cart-modal-total-price">Total: $Price</p>
            <p class="modal-footer-price-display-detail">Fees already included</p>
          </div>
          <button class="btn btn-secondary" data-bs-dismiss="modal" type="button">
            Continue Shopping
          </button>
          <button
            class="btn btn-primary"
            id="cart-modal-checkout"
            data-bs-dismiss="modal"
            type="button"
          >
            Checkout
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Store Area -->
  <section class="wrapper style1">
    <div class="inner">
      <div class="store-area">
        <div class="store-header">
          <div class="store-header-text">
            <h2>Club Store</h2>
            <p>Get exclusive merch, membership, materials, and more!</p>
          </div>
          <button class="button primary" onclick="openCartModal()" type="button">Cart</button>
        </div>
        {% for collection in store.collections %}
        <div class="store-aisle">
          <div>
            <h4 class="mb-1">{{ collection.title }}</h4>
            <p class="mb-1">{{ collection.description }}</p>
          </div>
          <div class="scrollable-container-x">
            <div
              {%
              if
              collection.isFeatured
              %}
              class="store-row store-row-featured"
              {%
              else
              %}
              class="store-row"
              {%
              endif
              %}
            >
              <div class="scroll-edge-overlay"></div>
              {% for item in collection.items %}
              <button
                class="store-item"
                data-bs-toggle="modal"
                data-bs-target="#itemModal"
                data-item-info="{{ item | dump }}"
                type="button"
              >
                <img src="{{ item.image }}" alt="{{ item.name }}" />
                <b>{{ item.name }}</b>
                {% if item.shortDesc %}
                <!-- Display the short description, if there is one -->
                {{ item.shortDesc }} {% elif item.variants and item.variants|length > 0 and
                item.variants[0].price %}
                <!-- Display the price, if there is one -->
                {% if item.variants[0].priceId and item.variants[0].priceId != "" %} ${{
                item.variants[0].price }} {% else %} ${{ item.variants[0].price }} • Offsale {%
                endif %} {% endif %}
              </button>
              {% endfor %}
            </div>
          </div>
        </div>
        {% endfor %}
      </div>
    </div>
  </section>
</div>

<!-- Stripe Code -->
<script src="https://js.stripe.com/v3/"></script>
<script>
  // SETTINGS
  var PUBLISHABLE_KEY =
    'pk_test_51RCftNPQmYquuuIRN5HV3rb461GA119I3cb4PSgXE2iM2ObtvdkpkpAhBSyHknEvRTo22y2vAUcdJrwKiPCQ221f00CuHKc72G'; // Your own publishable key: https://dashboard.stripe.com/test/apikeys
  var DOMAIN = location.href.replace(/[^/]*$/, ''); // The domain you want your users to be redirected back to after payment
  var NOT_FOR_SALE_DESCRIPTION = 'Item is not yet for sale'; // The ID and description to show when an item is not for sale
  var RESET_AFTER_N_DAYS = 1; // The number of days after which the cart and terms of service will be reset (0 = always, 1 = 1 day, etc.)

  // VARIABLES
  var stripe = Stripe(PUBLISHABLE_KEY);
  var userShoppingCart = []; // The cart is an array of items, each with a priceId and quantity
  var userOrderId = ''; // The unique identifier for a user's purchase, format YYYYMMDDHHMMSS-{random 7 chars}
  var ppformModal = null; // The post-payment form modal, to be instantiated when the page loads

  // HELPER FUNCTIONS
  // Check if a priceId is valid
  function isValidPriceId(priceId) {
    return priceId !== null && priceId !== '' && priceId !== NOT_FOR_SALE_DESCRIPTION;
  }

  // Run sanity checks for a given cart item
  function validateCartItem(cartItem) {
    // Check if the item is valid
    if (!cartItem) {
      return { isValid: false, reason: 'Cart item is invalid' };
    }

    // Check if the item has a valid priceId
    if (!isValidPriceId(cartItem.price)) {
      return { isValid: false, reason: 'Item is offsale or Invalid priceId.' + cartItem.price };
    }

    // Check if the item has a valid quantity
    if (cartItem.quantity === null || cartItem.quantity < 1) {
      return { isValid: false, reason: 'Invalid quantity.' + cartItem.quantity };
    }

    // Make sure it has a valid itemInfo and variantInfo
    if (!cartItem.itemInfo || !cartItem.variantInfo) {
      return { isValid: false, reason: 'Missing itemInfo or variantInfo' };
    }

    return { isValid: true, reason: 'Valid cart item' };
  }

  // Clear the Item Modal data that would be populated from a variant
  function resetItemModal() {
    var itemModal = document.getElementById('itemModal');

    // Clear variant buttons
    itemModal.querySelector('.mcq').style.display = 'none';
    itemModal.querySelector('.mcq-options').innerHTML = '';

    // Reset all text
    itemModal.querySelector('#item-modal-price').textContent = NOT_FOR_SALE_DESCRIPTION;
    itemModal.querySelector('#item-modal-description').textContent = NOT_FOR_SALE_DESCRIPTION;
    itemModal.querySelector('#item-modal-quantity').textContent = '1';

    // Reset the Price ID
    itemModal.querySelector('#item-modal-addtocart').dataset.priceId = NOT_FOR_SALE_DESCRIPTION;

    // Reset the modal footer
    itemModal.querySelector('#item-modal-footer-standard').classList.remove('d-none');
    itemModal.querySelector('#item-modal-footer-addedtocart').classList.add('d-none');
  }

  // Update the Item Modal with a given Variant
  function selectVariant(item, selectedVariant) {
    var itemModal = document.getElementById('itemModal');
    resetItemModal();

    // Check if the variant is valid
    if (selectedVariant === null || selectedVariant === undefined) {
      console.log('Invalid variant selected.');
      return;
    }

    // Update the description
    itemModal.querySelector('#item-modal-description').textContent = selectedVariant.description;

    // Update the price
    if (selectedVariant.price) {
      if (isValidPriceId(selectedVariant.priceId)) {
        itemModal.querySelector('#item-modal-price').textContent =
          '$' + selectedVariant.price + ' each';
      } else {
        itemModal.querySelector('#item-modal-price').textContent =
          '$' + selectedVariant.price + ' each (Offsale)';
      }
    } else {
      itemModal.querySelector('#item-modal-price').textContent = NOT_FOR_SALE_DESCRIPTION;
    }

    // Insert the item info and variant info into the button
    itemModal.querySelector('#item-modal-addtocart').dataset.itemInfo = JSON.stringify(item);
    itemModal.querySelector('#item-modal-addtocart').dataset.variantInfo =
      JSON.stringify(selectedVariant);

    // Update the image in the item modal
    itemModal.querySelector('#item-modal-image').src = item.image;
    // If there is an item-specific image, use it
    if (selectedVariant.image) {
      itemModal.querySelector('#item-modal-image').src = selectedVariant.image;
    }

    // Check if there is more than one variant
    if (item.variants.length > 1) {
      // Show the options list
      itemModal.querySelector('.mcq').style.display = 'block';

      // Populate the options list (mcq-options) with the variants
      var optionsList = itemModal.querySelector('.mcq-options');
      for (let variant of item.variants) {
        var button = document.createElement('button');
        button.className = 'btn btn-sm btn-secondary me-2';
        button.textContent = variant.name;
        optionsList.appendChild(button);

        // If this is the currently selected variant, replace the btn-secondary class with btn-primary
        if (variant.name === selectedVariant.name) {
          button.classList.remove('btn-secondary');
          button.classList.add('btn-primary');
        }

        // Clicking the button should switch to that variant
        button.addEventListener('click', function () {
          selectVariant(item, variant);
        });
      }
    }
  }

  // Generate a new ID for the order/overwrite the old one
  function generateOrderId() {
    const pad = (n) => n.toString().padStart(2, '0'); // Helper to ensure order IDs are always the same format/length

    // Get date and time string in local timezone
    const now = new Date();
    const ymd = `${now.getFullYear()}${pad(now.getMonth() + 1)}${pad(now.getDate())}`;
    const hms = `${pad(now.getHours())}${pad(now.getMinutes())}${pad(now.getSeconds())}`;

    // Construct random string of size 7
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let randomChars = '';

    for (let i = 0; i < 7; i++) {
      randomChars += chars[Math.floor(Math.random() * chars.length)];
    }

    return `${ymd}${hms}-${randomChars}`;
  }

  // Submit the given form data into the specified google form
  function submitDataToGoogleForm(formData, formId) {
    // Sanity Checks
    if (!formData || formData.length === 0) {
      return {
        success: false,
        message: 'Error when trying to submit form - Form data is empty or invalid.',
      };
    }
    if (!formId || formId === '') {
      return {
        success: false,
        message: 'Error when trying to submit form - Form ID is empty or invalid.',
      };
    }

    // Prepare the target url
    const host = 'https://docs.google.com/forms/d/e/';
    const targetUrl = `${host}${formId}/formResponse`;

    // Prepare the form data (Format the data as URL-encoded key-value pairs)
    const formattedData = new URLSearchParams();
    formData.forEach((data) => {
      if (data.entry && data.value) {
        formattedData.append(`entry.${data.entry}`, data.value);
      }
    });

    // Send the HTTP POST request
    fetch(targetUrl, {
      method: 'POST',
      mode: 'no-cors', // We cannot use CORS here because we're trying to post to a different domain from the front-end. Reading the response requires a backend proxy.
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formattedData.toString(),
    });
    /*.then(response => {
        if (response.ok) {
          return {success: true, message: "Form submitted successfully!"};
        } else {
          return {success: false, message: "Failed to submit the form. "+response.statusText};
        }
      })
      .catch(error => {
        return {success: false, message: "Error submitting form. "+error.type+error.message};
      });*/
  }

  // PAGE ACTIONS
  // Page: When a shop item is clicked, fill the Item Modal with the details of the item.
  document.querySelectorAll('.store-item').forEach(function (button) {
    button.addEventListener('click', function (e) {
      // Get the item info
      var item = JSON.parse(button.dataset.itemInfo);

      // Set up the basic item details
      var itemModal = document.getElementById('itemModal');
      itemModal.querySelector('#itemModalLabel').textContent = item.name;
      itemModal.querySelector('#item-modal-image').src = item.image;
      itemModal.querySelector('#item-modal-image').alt = item.name;

      // Update the item modal with the variant details
      var firstVariant = item.variants[Object.keys(item.variants)[0]];
      selectVariant(item, firstVariant);
    });
  });

  // Post Payment Form: Submit the form
  const ppformGoogleId = '1FAIpQLScD-LzhUBFRwoxNNT4jOAK7KZ9WdKwwENPRQED-h7YXKA0M_w'; // The ID of the Google Form to submit the data to
  function submitPPForm() {
    var email = document.getElementById('ppform-email').value;
    var contact = document.getElementById('ppform-contact').value;
    var pickupLocation = document.getElementById('ppform-pickup-location').value;
    var tshirtSize = document.getElementById('ppform-tshirt-size').value;
    var comments = document.getElementById('ppform-comments').value;

    // Validate the responses
    if (!email || !contact || !pickupLocation) {
      alert('Please fill out all required fields.');
      return;
    }

    console.log('Post-payment form responses:', {
      email,
      contact,
      pickupLocation,
      tshirtSize,
      comments,
      userOrderId,
    });

    // Send the form data via an HTTP Request
    const formData = [
      { entry: '866682780', value: userOrderId },
      { entry: '2036784843', value: email },
      { entry: '188858730', value: contact },
      { entry: '139409841', value: pickupLocation },
      { entry: '82496741', value: tshirtSize },
      { entry: '750103793', value: comments },
    ];
    var ppformSubmissionResult = submitDataToGoogleForm(formData, ppformGoogleId);

    // Unable to check the result status because we're not using a backend proxy
    /*if (!ppformSubmissionResult.success) {
      alert("Error when trying to submit the form. Please try again and let us know if this error keeps happening. ("+ppformSubmissionResult.message+")");
    }*/

    // Close the modal
    ppformModal.hide();
    alert("You're all set! If you have any questions, please reach out to us via Discord :3");
  }

  // ITEM MODAL ACTIONS
  // Item Modal: Quantity
  var quantity = document.querySelector('#item-modal-quantity');
  document.querySelector('#item-modal-quantity-up').addEventListener('click', function () {
    var currentQuantity = parseInt(quantity.textContent);
    quantity.textContent = currentQuantity + 1;
  });
  document.querySelector('#item-modal-quantity-down').addEventListener('click', function () {
    var currentQuantity = parseInt(quantity.textContent);
    if (currentQuantity > 1) {
      quantity.textContent = currentQuantity - 1;
    }
  });

  // Item Modal: Add to Cart Button
  var addToCartButton = document.querySelector('#item-modal-addtocart');
  addToCartButton.addEventListener('click', function (e) {
    // Get the item info and variant info from the button
    var itemInfo = JSON.parse(addToCartButton.dataset.itemInfo);
    var variantInfo = JSON.parse(addToCartButton.dataset.variantInfo);
    if (!itemInfo || !variantInfo) {
      alert(
        "Oops, we couldn't parse the item data. Please try again and let us know if this error keeps happening."
      );
      return;
    }

    var quantity = parseInt(document.querySelector('#item-modal-quantity').textContent, 10);

    // Run sanity checks
    var validation = validateCartItem({
      price: variantInfo.priceId,
      quantity: quantity,
      itemInfo: itemInfo,
      variantInfo: variantInfo,
    });
    if (!validation.isValid) {
      alert(
        "Oops, you can't add that to your cart. Please let us know if you think this is a mistake. (" +
          validation.reason +
          ')'
      );
      return;
    }

    // No duplicate items are allowed. Check if the item is already in the cart.
    var isItemAlreadyInCart = false;
    for (var i = 0; i < userShoppingCart.length; i++) {
      if (userShoppingCart[i].price === variantInfo.priceId) {
        isItemAlreadyInCart = true;

        // If item is already in cart, just append the new quantity
        userShoppingCart[i].quantity += quantity;
        break;
      }
    }

    // If item is not in cart, add it
    if (!isItemAlreadyInCart) {
      userShoppingCart.push({
        price: variantInfo.priceId,
        quantity: quantity,
        itemInfo: itemInfo,
        variantInfo: variantInfo,
      });
    }

    // Change the item modal footer to the "Added to cart" state
    var itemModal = document.getElementById('itemModal');
    itemModal.querySelector('#item-modal-footer-standard').classList.add('d-none');
    itemModal.querySelector('#item-modal-footer-addedtocart').classList.remove('d-none');
  });

  // CART MODAL ACTIONS

  // Open the cart modal
  function openCartModal() {
    var cartModal = new bootstrap.Modal(document.getElementById('cartModal'));
    cartModal.show();

    renderCartModal();
  }

  // Re-render the contents of the cart
  function renderCartModal() {
    // Clear the contents of the cart modal
    var cartItemList = document.getElementById('cart-modal-item-list');
    cartItemList.innerHTML = '';

    // Iterate through the user's cart, and add each item to the cart modal
    var totalPrice = 0;
    var itemCount = 0;
    for (var i = 0; i < userShoppingCart.length; i++) {
      var item = userShoppingCart[i];
      var priceId = item.price;
      var quantity = item.quantity;
      var itemDetails = item.itemInfo;
      var variantDetails = item.variantInfo;

      // Run sanity checks
      var validation = validateCartItem(item);
      if (!validation.isValid) {
        // Remove the invalid item from the cart
        userShoppingCart.splice(i, 1);
        i--; // Decrement i to account for the removed item

        alert(
          "Oops, one of your items is invalid. We've removed it from your cart. Please let us know if you think this is a mistake. (" +
            validation.reason +
            ')'
        );
        continue; // Skip to the next item
      }

      // Update the total price and item count
      var cartItemPrice = parseFloat(variantDetails.price) ? parseFloat(variantDetails.price) : 0;
      totalPrice += cartItemPrice * quantity;
      itemCount += quantity;

      // Any last visual changes
      var itemImage = itemDetails.image;
      if (variantDetails.image) {
        itemImage = variantDetails.image;
      }
      var variantName = variantDetails.name;
      if (itemDetails.variants.length <= 1) {
        variantName = '';
      }

      // Create the cart item element and add it to the cart modal
      var cartItem = document.createElement('div');
      cartItem.className = 'cart-item';
      cartItem.innerHTML = `
        <img src="${itemImage}">
        <div class="cart-item-details">
          <div class="cart-item-header">
            <p class="cart-item-header-title">${itemDetails.name}</p>
            <p>$${cartItemPrice}</p>
          </div>
            <p>${variantName}</p>
          <div class="cart-item-actions mt-2">
            <button class="btn btn-sm btn-outline-secondary" onclick="updateCartItemQuantity(${i}, -1)" type="button">–</button>
            <span class="cart-item-quantity">${quantity}</span>
            <button class="btn btn-sm btn-outline-secondary" onclick="updateCartItemQuantity(${i}, 1)" type="button">+</button>
            <button class="btn btn-sm btn-link text-secondary" onclick="removeCartItem(${i})" type="button">Delete</button>
          </div>
        </div>
      `;
      cartItemList.appendChild(cartItem);
    }

    // Update the total price and item count in the cart modal
    var cartModalTotalPrice = document.getElementById('cart-modal-total-price');
    cartModalTotalPrice.textContent = 'Total: $' + totalPrice;
    var cartModalItemCount = document.getElementById('cart-modal-item-count');
    cartModalItemCount.textContent = itemCount + ' item' + (itemCount === 1 ? '' : 's');
  }

  // Cart Modal: Update item quantity
  function updateCartItemQuantity(index, change) {
    var item = userShoppingCart[index];
    var newQuantity = item.quantity + change;

    // Check if the new quantity is valid
    if (newQuantity < 1) {
      alert("You can't have less than 1 of that item (Try deleting it instead.)");
      return;
    }

    // Update the quantity in the cart
    item.quantity = newQuantity;

    // Re-render the cart modal
    renderCartModal();
  }

  // Cart Modal: Remove item from cart
  function removeCartItem(index) {
    // Remove the item from the cart
    userShoppingCart.splice(index, 1);

    // Re-render the cart modal
    renderCartModal();
  }

  // Cart Modal: Purchase Button
  var purchaseButton = document.querySelector('#cart-modal-checkout');
  purchaseButton.addEventListener('click', function (e) {
    var priceId = purchaseButton.dataset.priceId;
    var quantity = parseInt(document.querySelector('#item-modal-quantity').textContent, 10);

    // Run sanity checks on the cart
    // Check if the cart is empty
    if (userShoppingCart.length === 0) {
      alert('Please add an item to your cart before checking out.');
      return;
    }
    var allItemsAreGood = true;
    for (var i = 0; i < userShoppingCart.length; i++) {
      // Run sanity checks on each item
      var validation = validateCartItem(userShoppingCart[i]);
      if (!validation.isValid) {
        allItemsAreGood = false;

        // Remove the invalid item from the cart
        userShoppingCart.splice(i, 1);
        i--; // Decrement i to account for the removed item

        alert(
          "Oops, one of your items is invalid. We've removed it from your cart. Please let us know if you think this is a mistake. (" +
            validation.reason +
            ')'
        );
        continue;
      }
    }

    // If an item was invalid, return early and re-render the cart modal
    if (!allItemsAreGood) {
      renderCartModal();
      return;
    }

    // Make a copy of the cart that is acceptable for Stripe.
    var userShoppingCartCopy = [];
    for (var i = 0; i < userShoppingCart.length; i++) {
      userShoppingCartCopy.push({
        price: userShoppingCart[i].price,
        quantity: userShoppingCart[i].quantity,
      }); // No other info is allowed
    }

    // Generate a new ID associated w/ this order
    userOrderId = generateOrderId();

    // Save any user data before redirecting to a new page.
    saveSession();

    // Make the call to Stripe.js to redirect to the checkout page
    stripe
      .redirectToCheckout({
        lineItems: userShoppingCartCopy,
        mode: 'payment',
        successUrl: DOMAIN + '?result=success&session_id={CHECKOUT_SESSION_ID}',
        cancelUrl: DOMAIN + '?result=canceled&session_id={CHECKOUT_SESSION_ID}',
        clientReferenceId: userOrderId,
      })
      .then()
      .catch(function (error) {
        console.error('Unexpected error:', error.type, error.message);
        alert(
          'Oops -- Please try again and let us know if this error keeps happening. (' +
            error.type +
            ': ' +
            error.message +
            ')'
        );
      });
  });

  // PAGE EVENTS

  // Save any user data before redirecting to a new page.
  function saveSession() {
    // Save the cart to localStorage
    localStorage.setItem('userShoppingCart', JSON.stringify(userShoppingCart));
    console.log('Cart saved to localStorage. (' + userShoppingCart.length + ' items)');

    // Save the order ID to localStorage
    localStorage.setItem('userOrderId', userOrderId);
    console.log('Order ID saved to localStorage.');

    // Save the last session date to localStorage, but only if the cart is not empty
    if (userShoppingCart.length >= 1) {
      var currentDate = new Date();
      localStorage.setItem('lastSessionDate', currentDate.toISOString());
      console.log('Session date saved to localStorage: ' + currentDate.toISOString());
    } else {
      console.log('Not counting this session, since the cart is empty.');
    }
  }
  window.addEventListener('beforeunload', saveSession);

  // Reset any user data and render a fresh start.
  function resetSession() {
    // Reset the cart
    userShoppingCart = [];
    localStorage.removeItem('userShoppingCart');

    // Show the terms modal
    var termsModal = new bootstrap.Modal(document.querySelector('#terms-modal'));
    termsModal.show();
  }

  // Load any user data from localStorage
  function loadSession() {
    // Handle Payment Success and Failure
    const urlParams = new URLSearchParams(window.location.search);
    const result = urlParams.get('result');
    if (result === 'success') {
      // Clear the user's saved cart, if they have one.
      userShoppingCart = [];
      localStorage.removeItem('userShoppingCart');

      // Load order ID so we can send to post-payment form
      var savedOrderId = localStorage.getItem('userOrderId');

      if (savedOrderId) {
        userOrderId = savedOrderId;
        // Insert order ID into the post-payment form modal so the user can save it, if desired
        console.log('Order ID loaded from localStorage.');
      } else {
        console.log('No saved order ID found.');
      }

      localStorage.removeItem('userOrderId');

      // Show the post-payment form modal
      ppformModal = new bootstrap.Modal(document.querySelector('#ppform-modal'));
      ppformModal.show();

      // alert('Success! Thank you for your purchase. We\'ll review your order and coordinate with you soon. If you have any questions, please reach out to us via Discord :3');
    } else if (result === 'canceled') {
      alert('Ah, it looks like you canceled the payment. No worries, you can try again later :3');
    }

    // Check if the user was here in the last N days
    var lastSessionDate = localStorage.getItem('lastSessionDate');
    if (lastSessionDate) {
      var lastSession = new Date(lastSessionDate);
      var currentDate = new Date();
      var timeDiff = Math.abs(currentDate - lastSession);
      var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
      console.log(
        'Last session was on ' +
          lastSession.toISOString() +
          ', which was ' +
          diffDays +
          ' days ago.'
      );
      if (diffDays > RESET_AFTER_N_DAYS) {
        console.log(
          'This is higher than the reset threshold (' +
            RESET_AFTER_N_DAYS +
            " days), so the user's stored data is being reset."
        );
        resetSession();
        return;
      }
    } else {
      console.log("No last session date found. This is the user's first visit.");
      resetSession();
      return;
    }

    // Load the cart from localStorage
    var savedCart = localStorage.getItem('userShoppingCart');
    if (savedCart) {
      userShoppingCart = JSON.parse(savedCart);
      console.log('Cart loaded from localStorage. (' + userShoppingCart.length + ' items)');
    } else {
      console.log('No saved cart found.');
    }
  }
  window.addEventListener('load', loadSession);
</script>
