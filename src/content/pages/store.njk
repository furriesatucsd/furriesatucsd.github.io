---
layout: base.njk
title: Club Store
description: Get exclusive merch, membership, materials, and more!
googleAnalyticsId: { { site.googleAnalyticsId } }
---

<!-- Wrapper -->
<div id="wrapper" class="divided">

  <!-- OnLoad Modal (when the user first lands on the page) -->
  <div class="modal fade" id="terms-modal" tabindex="-1" aria-labelledby="onloadModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h4 class="modal-title" id="onloadModalLabel">Welcome to our Club Store!</h4>
          </div>
        </div>
        <div class="modal-body">
          <p>Important Reminders:</p>
          <ul>
            <li>Physical items are usually only for <span class="text-danger">in-person pickup at UCSD, SDF, or IBFM.</span></li>
            <li>All sales are final (Sorry -- No refunds, but we allow exchanges within 7 days.)</li>
            <li>By using the Club Store, you agree to our <a href="https://docs.google.com/document/d/1pGtIp7QoiZ7fPP1KXVEw85TiWYM2SDL1Vo1zUNRaqHU/edit?usp=sharing" target="_blank">Terms of Service</a>.</li>
          </ul>
          <p>If you have any questions, please reach out to us via Discord :3</p>
        </div>
        <div class="modal-footer">
          <button class="btn btn-primary" data-bs-dismiss="modal">Agree and continue</button>
          <a class="btn btn-secondary" href="javascript:history.back()">Go back</a>
        </div>
      </div>
    </div>
  </div>

  <!-- Item Modal -->
  <div class="modal fade" id="itemModal" tabindex="-1" aria-labelledby="itemModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h4 class="modal-title" id="itemModalLabel">Title</h4>
            {# <p>Short Description</p> #}
          </div>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="box-shadow: none;"></button>
        </div>
        <div class="modal-body">
            <img id="item-modal-image" src="/assets/images/store/beach_1.png">
          <div class="options-list">
            <!-- Options -->
            <div class="mcq">
              <div class="mcq-header">
                <h6>Item options:</h6>
              </div>
              <div class="mcq-options">
                <button class="btn btn-sm btn-secondary">Option A</button>
                <button class="btn btn-sm btn-light">Option B</button>
              </div>
            </div>

            <!-- Description -->
            <p id="item-modal-description">
              Full item description
            </p>
          </div>
        </div>
        <div class="modal-footer" id="item-modal-footer-standard">
          <div class="modal-footer-price-display">
            <p id="item-modal-price">$Price</p>
            <p style="font-size: small; opacity: 50%;">Taxes already included</p>
          </div>
          <div class="cart-item-actions">
            <button class="btn btn-outline-secondary" id="item-modal-quantity-down">–</button>
            <span class="cart-item-quantity" id="item-modal-quantity">1</span>
            <button class="btn btn-outline-secondary" id="item-modal-quantity-up">+</button>
            <button id="item-modal-addtocart" class="btn btn-primary">Add to Cart</button>
          </div>
        </div>
        <!-- Different footer state for when item is added to cart: -->
        <div class="modal-footer" id="item-modal-footer-addedtocart">
          <div class="modal-footer-price-display">
            <span class="text-success font-weight-bold">Added to Cart!</span>
          </div>
          <button class="btn btn-link" style="color: gray" data-bs-dismiss="modal" onclick="openCartModal()">View Cart</button>
          <button class="btn btn-secondary" data-bs-dismiss="modal">Continue Shopping</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Cart Modal -->
  <div class="modal fade" id="cartModal" tabindex="-1" aria-labelledby="cartModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <div>
            <h4 class="modal-title" id="cartModalLabel">Your Cart</h4>
            <p id="cart-modal-item-count">Item Count</p>
          </div>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" style="box-shadow: none;"></button>
        </div>
        <div class="modal-body" id="cart-modal-item-list">
          <div class="cart-item">
            <img src="/assets/images/store/beach_1.png">
            <div class="cart-item-details">
              <div class="cart-item-header">
                <p style="flex-grow: 1">Item Title</p>
                <p>$Price</p>
              </div>
              <p>Item Options</p>
              <div class="cart-item-actions mt-2">
                <button class="btn btn-sm btn-outline-secondary">–</button>
                <span class="cart-item-quantity">1</span>
                <button class="btn btn-sm btn-outline-secondary">+</button>
                <button class="btn btn-sm btn-link" style="color: gray">Delete</button>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <div class="modal-footer-price-display">
            <p id="cart-modal-total-price">Total: $Price</p>
            <p style="font-size: small; opacity: 50%;">Taxes already included</p>
          </div>
          <button class="btn btn-secondary" data-bs-dismiss="modal">Continue Shopping</button>
          <button class="btn btn-primary" id="cart-modal-checkout" data-bs-dismiss="modal">Checkout</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Store Area -->
  <section class="wrapper style1">
    <div class="inner">
      <div class="store-area">
        <div class="store-header">
          <div class="store-header-text">
            <h2>Club Store</h2>
            <p>Get exclusive merch, membership, materials, and more!</p>
          </div>
          <button class="button primary" onclick="openCartModal()">Cart</button>
        </div>
        {% for collection in store.collections %}  
          <div class="store-aisle">
            <div>
              <h4 class="mb-1">{{ collection.title }}</h4>
              <p class="mb-1">{{ collection.description }}</p>
            </div>
            <div class="scrollable-container-x">
              <div 
                {% if collection.isFeatured %}
                  class="store-row store-row-featured"
                {% else %}
                  class="store-row"
                {% endif %}
              >
                <div class="scroll-edge-overlay"></div>
                {% for item in collection.items %}
                    <button class="store-item"
                      data-bs-toggle="modal"
                      data-bs-target="#itemModal"
                      data-item-info="{{ item | dump }}"
                    >
                    <img src="{{ item.image }}">
                    <p>
                      <b>{{ item.name }}</b>
                      <br>
                      {% if item.shortDesc %}
                        <!-- Display the short description, if there is one -->
                        {{ item.shortDesc }}
                      {% elif item.variants and item.variants|length > 0 and item.variants[0].price %}
                        <!-- Display the price, if there is one -->
                        {% if item.variants[0].priceId and item.variants[0].priceId != "" %}
                          ${{ item.variants[0].price }}
                        {% else %}
                          ${{ item.variants[0].price }} • Offsale
                        {% endif %}
                      {% endif %}
                    </p>
                    </button>
                {% endfor %}
              </div>
            </div>
          </div>
        {% endfor %}
      </div>
    </div>
  </section>

</div>

<!-- Stripe Code -->
<script src="https://js.stripe.com/v3/"></script>
<script>
  // SETTINGS
  var PUBLISHABLE_KEY = "pk_test_51RCftNPQmYquuuIRN5HV3rb461GA119I3cb4PSgXE2iM2ObtvdkpkpAhBSyHknEvRTo22y2vAUcdJrwKiPCQ221f00CuHKc72G"; // Your own publishable key: https://dashboard.stripe.com/test/apikeys
  var DOMAIN = location.href.replace(/[^/]*$/, ""); // The domain you want your users to be redirected back to after payment
  var NOT_FOR_SALE_DESCRIPTION = "Item is not yet for sale"; // The ID and description to show when an item is not for sale
  var RESET_AFTER_N_DAYS = 3; // The number of days after which the cart and terms of service will be reset (0 = always, 1 = 1 day, etc.)

  // VARIABLES
  var stripe = Stripe(PUBLISHABLE_KEY);
  var userShoppingCart = []; // The cart is an array of items, each with a priceId and quantity

  // HELPER FUNCTIONS
  // Check if a priceId is valid
  function isValidPriceId(priceId) {
    return priceId !== null && priceId !== "" && priceId !== NOT_FOR_SALE_DESCRIPTION;
  }

  // Run sanity checks for a given cart item
  function validateCartItem(cartItem) {
    // Check if the item is valid
    if (!cartItem) {
      return {isValid:false, reason:"Cart item is invalid"};
    }

    // Check if the item has a valid priceId
    if (!isValidPriceId(cartItem.price)) {
      return {isValid: false, reason: "Item is offsale or Invalid priceId."+cartItem.price};
    }

    // Check if the item has a valid quantity
    if (cartItem.quantity === null || cartItem.quantity < 1) {
      return {isValid: false, reason: "Invalid quantity."+cartItem.quantity};
    }

    // Make sure it has a valid itemInfo and variantInfo
    if (!cartItem.itemInfo || !cartItem.variantInfo) {
      return {isValid: false, reason: "Missing itemInfo or variantInfo"};
    }

    return {isValid: true, reason: "Valid cart item"};
  }

  // Clear the Item Modal data that would be populated from a variant
  function resetItemModal() {
    var itemModal = document.getElementById("itemModal");

    // Clear variant buttons
    itemModal.querySelector(".mcq").style.display = "none";
    itemModal.querySelector(".mcq-options").innerHTML = "";

    // Reset all text
    itemModal.querySelector("#item-modal-price").textContent = NOT_FOR_SALE_DESCRIPTION;
    itemModal.querySelector("#item-modal-description").textContent = NOT_FOR_SALE_DESCRIPTION;
    itemModal.querySelector("#item-modal-quantity").textContent = "1";

    // Reset the Price ID
    itemModal.querySelector("#item-modal-addtocart").dataset.priceId = NOT_FOR_SALE_DESCRIPTION;

    // Reset the modal footer
    itemModal.querySelector("#item-modal-footer-standard").classList.remove("d-none");
    itemModal.querySelector("#item-modal-footer-addedtocart").classList.add("d-none");
  }

  // Update the Item Modal with a given Variant
  function selectVariant(item, selectedVariant) {
    var itemModal = document.getElementById("itemModal");
    resetItemModal();

    // Check if the variant is valid
    if (selectedVariant === null || selectedVariant === undefined) {
      console.log("Invalid variant selected.");
      return;
    }

    // Update the description
    itemModal.querySelector("#item-modal-description").textContent = selectedVariant.description;

    // Update the price
    if (selectedVariant.price) {
      if (isValidPriceId(selectedVariant.priceId)) {
        itemModal.querySelector("#item-modal-price").textContent = "$" + selectedVariant.price + " each";
      } else {
        itemModal.querySelector("#item-modal-price").textContent = "$" + selectedVariant.price + " each (Offsale)";
      }
    } else {
      itemModal.querySelector("#item-modal-price").textContent = NOT_FOR_SALE_DESCRIPTION;
    }

    // Insert the item info and variant info into the button
    itemModal.querySelector("#item-modal-addtocart").dataset.itemInfo = JSON.stringify(item);
    itemModal.querySelector("#item-modal-addtocart").dataset.variantInfo = JSON.stringify(selectedVariant);

    // Update the image in the item modal
    itemModal.querySelector("#item-modal-image").src = item.image;
    // If there is an item-specific image, use it
    if (selectedVariant.image) {
      itemModal.querySelector("#item-modal-image").src = selectedVariant.image;
    }

    // Check if there is more than one variant
    if (item.variants.length > 1) {
      // Show the options list
      itemModal.querySelector(".mcq").style.display = "block";

      // Populate the options list (mcq-options) with the variants
      var optionsList = itemModal.querySelector(".mcq-options");
      for (let variant of item.variants) {
        var button = document.createElement("button");
        button.className = "btn btn-sm btn-secondary me-2";
        button.textContent = variant.name;
        optionsList.appendChild(button);

        // If this is the currently selected variant, replace the btn-secondary class with btn-primary
        if (variant.name === selectedVariant.name) {
          button.classList.remove("btn-secondary");
          button.classList.add("btn-primary");
        }

        // Clicking the button should switch to that variant
        button.addEventListener("click", function() { selectVariant(item, variant) });
      }
    }
  }

  // PAGE ACTIONS
  // Page: When a shop item is clicked, fill the Item Modal with the details of the item.
  document.querySelectorAll(".store-item").forEach(function(button) {
    button.addEventListener("click", function(e) {
      
      // Get the item info
      var item = JSON.parse(button.dataset.itemInfo);

      // Set up the basic item details
      var itemModal = document.getElementById("itemModal");
      itemModal.querySelector("#itemModalLabel").textContent = item.name;
      itemModal.querySelector("#item-modal-image").src = item.image;
      itemModal.querySelector("#item-modal-image").alt = item.name;

      // Update the item modal with the variant details
      var firstVariant = item.variants[Object.keys(item.variants)[0]];
      selectVariant(item, firstVariant);
    });
  });

  // ITEM MODAL ACTIONS
  // Item Modal: Quantity
  var quantity = document.querySelector("#item-modal-quantity");
  document.querySelector("#item-modal-quantity-up").addEventListener("click", function() {
    var currentQuantity = parseInt(quantity.textContent);
    quantity.textContent = currentQuantity + 1;
  });
  document.querySelector("#item-modal-quantity-down").addEventListener("click", function() {
    var currentQuantity = parseInt(quantity.textContent);
    if (currentQuantity > 1) {
      quantity.textContent = currentQuantity - 1;
    }
  });

  // Item Modal: Add to Cart Button
  var addToCartButton = document.querySelector("#item-modal-addtocart");
  addToCartButton.addEventListener("click", function(e) {
    // Get the item info and variant info from the button
    var itemInfo = JSON.parse(addToCartButton.dataset.itemInfo);
    var variantInfo = JSON.parse(addToCartButton.dataset.variantInfo);
    if (!itemInfo || !variantInfo) {
      alert("Oops, we couldn't parse the item data. Please try again and let us know if this error keeps happening.");
      return;
    }

    var quantity = parseInt(document.querySelector("#item-modal-quantity").textContent, 10);

    // Run sanity checks
    var validation = validateCartItem({ price: variantInfo.priceId, quantity: quantity, itemInfo: itemInfo, variantInfo: variantInfo });
    if (!validation.isValid) {
      alert("Oops, you can't add that to your cart. Please let us know if you think this is a mistake. (" + validation.reason + ")");
      return;
    }

    // No duplicate items are allowed. Check if the item is already in the cart.
    var isItemAlreadyInCart = false;
    for (var i = 0; i < userShoppingCart.length; i++) {
      if (userShoppingCart[i].price === variantInfo.priceId) {
        isItemAlreadyInCart = true;

        // If item is already in cart, just append the new quantity
        userShoppingCart[i].quantity += quantity;
        break;
      }
    }

    // If item is not in cart, add it
    if (!isItemAlreadyInCart) {
      userShoppingCart.push({ price: variantInfo.priceId, quantity: quantity, itemInfo: itemInfo, variantInfo: variantInfo });
    }

    // Change the item modal footer to the "Added to cart" state
    var itemModal = document.getElementById("itemModal");
    itemModal.querySelector("#item-modal-footer-standard").classList.add("d-none");
    itemModal.querySelector("#item-modal-footer-addedtocart").classList.remove("d-none");
  });

  // CART MODAL ACTIONS

  // Open the cart modal
  function openCartModal() {
    var cartModal = new bootstrap.Modal(document.getElementById("cartModal"));
    cartModal.show();

    renderCartModal();
  }

  // Re-render the contents of the cart
  function renderCartModal() {
    // Clear the contents of the cart modal
    var cartItemList = document.getElementById("cart-modal-item-list");
    cartItemList.innerHTML = "";

    // Iterate through the user's cart, and add each item to the cart modal
    var totalPrice = 0;
    var itemCount = 0;
    for (var i = 0; i < userShoppingCart.length; i++) {
      var item = userShoppingCart[i];
      var priceId = item.price;
      var quantity = item.quantity;
      var itemDetails = item.itemInfo;
      var variantDetails = item.variantInfo;

      // Run sanity checks
      var validation = validateCartItem(item);
      if (!validation.isValid) {
        
        // Remove the invalid item from the cart
        userShoppingCart.splice(i, 1);
        i--; // Decrement i to account for the removed item

        alert("Oops, one of your items is invalid. We've removed it from your cart. Please let us know if you think this is a mistake. (" + validation.reason + ")");
        continue; // Skip to the next item
      }

      // Update the total price and item count
      var cartItemPrice = parseFloat(variantDetails.price) ? parseFloat(variantDetails.price) : 0;
      totalPrice += cartItemPrice * quantity;
      itemCount += quantity;

      // Any last visual changes
      var itemImage = itemDetails.image;
      if (variantDetails.image) {itemImage = variantDetails.image;}
      var variantName = variantDetails.name;
      if (itemDetails.variants.length <= 1) {variantName = "";}

      // Create the cart item element and add it to the cart modal
      var cartItem = document.createElement("div");
      cartItem.className = "cart-item";
      cartItem.innerHTML = `
        <img src="${itemImage}">
        <div class="cart-item-details">
          <div class="cart-item-header">
            <p style="flex-grow: 1">${itemDetails.name}</p>
            <p>$${cartItemPrice}</p>
          </div>
            <p>${variantName}</p>
          <div class="cart-item-actions mt-2">
            <button class="btn btn-sm btn-outline-secondary" onclick="updateCartItemQuantity(${i}, -1)">–</button>
            <span class="cart-item-quantity">${quantity}</span>
            <button class="btn btn-sm btn-outline-secondary" onclick="updateCartItemQuantity(${i}, 1)">+</button>
            <button class="btn btn-sm btn-link" style="color: gray" onclick="removeCartItem(${i})">Delete</button>
          </div>
        </div>
      `;
      cartItemList.appendChild(cartItem);
    }

    // Update the total price and item count in the cart modal
    var cartModalTotalPrice = document.getElementById("cart-modal-total-price");
    cartModalTotalPrice.textContent = "Total: $" + totalPrice;
    var cartModalItemCount = document.getElementById("cart-modal-item-count");
    cartModalItemCount.textContent = itemCount + " item" + (itemCount === 1 ? "" : "s");
  }

  // Cart Modal: Update item quantity
  function updateCartItemQuantity(index, change) {
    var item = userShoppingCart[index];
    var newQuantity = item.quantity + change;

    // Check if the new quantity is valid
    if (newQuantity < 1) {
      alert("You can't have less than 1 of that item (Try deleting it instead.)");
      return;
    }

    // Update the quantity in the cart
    item.quantity = newQuantity;

    // Re-render the cart modal
    renderCartModal();
  }

  // Cart Modal: Remove item from cart
  function removeCartItem(index) {
    // Remove the item from the cart
    userShoppingCart.splice(index, 1);

    // Re-render the cart modal
    renderCartModal();
  }

  // Cart Modal: Purchase Button
  var purchaseButton = document.querySelector("#cart-modal-checkout");
  purchaseButton.addEventListener("click", function(e) {
    var priceId = purchaseButton.dataset.priceId;
    var quantity = parseInt(document.querySelector("#item-modal-quantity").textContent, 10);

    // Run sanity checks on the cart
    // Check if the cart is empty
    if (userShoppingCart.length === 0) {
      alert("Please add an item to your cart before checking out.");
      return;
    }
    var allItemsAreGood = true;
    for (var i = 0; i < userShoppingCart.length; i++) {
      // Run sanity checks on each item
      var validation = validateCartItem(userShoppingCart[i]);
      if (!validation.isValid) {
        allItemsAreGood = false;

        // Remove the invalid item from the cart
        userShoppingCart.splice(i, 1);
        i--; // Decrement i to account for the removed item

        alert("Oops, one of your items is invalid. We've removed it from your cart. Please let us know if you think this is a mistake. (" + validation.reason + ")");
        continue;
      }
    }

    // If an item was invalid, return early and re-render the cart modal
    if (!allItemsAreGood) {
      renderCartModal();
      return;
    }

    // Make a copy of the cart that is acceptable for Stripe.
    var userShoppingCartCopy = [];
    for (var i = 0; i < userShoppingCart.length; i++) {
      userShoppingCartCopy.push({ price: userShoppingCart[i].price, quantity: userShoppingCart[i].quantity }); // No other info is allowed
    }

    // Save any user data before redirecting to a new page.
    saveSession();

    // Make the call to Stripe.js to redirect to the checkout page
    stripe
      .redirectToCheckout({
      lineItems: userShoppingCartCopy,
      mode: "payment",
      successUrl:
        DOMAIN + "?result=success&session_id={CHECKOUT_SESSION_ID}",
      cancelUrl:
        DOMAIN + "?result=canceled&session_id={CHECKOUT_SESSION_ID}"
      })
      .then()
      .catch(function(error) {
        console.error("Unexpected error:", error.type, error.message);
        alert("Oops -- Please try again and let us know if this error keeps happening. (" + error.type + ": " + error.message + ")");
      });
  });

  // PAGE EVENTS
  // Handle Success and Failure
  const urlParams = new URLSearchParams(window.location.search);
  const result = urlParams.get('result');
  if (result === 'success') {
    // Clear the user's saved cart, if they have one.
    userShoppingCart = [];
    localStorage.removeItem("userShoppingCart");
    alert('Success! Thank you for your purchase. We\'ll review your order and coordinate with you soon. If you have any questions, please reach out to us via Discord :3');
  } else if (result === 'canceled') {
    alert('Ah, it looks like you canceled the payment. No worries, you can try again later :3');
  }

  // Save any user data before redirecting to a new page.
  function saveSession() {
    // Save the cart to localStorage
    localStorage.setItem("userShoppingCart", JSON.stringify(userShoppingCart));
    console.log("Cart saved to localStorage. ("+userShoppingCart.length+" items)");

    // Save the last session date to localStorage, but only if the cart is not empty
    if (userShoppingCart.length >= 1) {
      var currentDate = new Date();
      localStorage.setItem("lastSessionDate", currentDate.toISOString());
      console.log("Session date saved to localStorage: " + currentDate.toISOString());
    } else {
      console.log("Not counting this session, since the cart is empty.");
    }
  }
  window.addEventListener("beforeunload", saveSession);

  // Reset any user data and render a fresh start.
  function resetSession() {
    // Reset the cart
    userShoppingCart = [];
    localStorage.removeItem("userShoppingCart");

    // Show the terms modal
    var termsModal = new bootstrap.Modal(document.querySelector("#terms-modal"));
    termsModal.show();
  }

  // Load any user data from localStorage
  function loadSession() {
    // Check if the user was here in the last N days
    var lastSessionDate = localStorage.getItem("lastSessionDate");
    if (lastSessionDate) {
      var lastSession = new Date(lastSessionDate);
      var currentDate = new Date();
      var timeDiff = Math.abs(currentDate - lastSession);
      var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
      console.log("Last session was on " + lastSession.toISOString() + ", which was " + diffDays + " days ago.");
      if (diffDays > RESET_AFTER_N_DAYS) {
        console.log("This is higher than the reset threshold, so the user's stored data is being reset.");
        resetSession(); return;
      }
    } else {
      console.log("No last session date found. This is the user's first visit.");
      resetSession(); return;
    }

    // Load the cart from localStorage
    var savedCart = localStorage.getItem("userShoppingCart");
    if (savedCart) {
      userShoppingCart = JSON.parse(savedCart);
      console.log("Cart loaded from localStorage. ("+userShoppingCart.length+" items)");
    } else {
      console.log("No saved cart found.");
    }
  }
  window.addEventListener("load", loadSession);
</script>